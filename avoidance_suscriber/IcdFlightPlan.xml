<icd>
<!-- 
	The ICD document format is currently very simple.  There are only a hand-full of tags 
	that do anything interesting.  All tags (with the exception of <eat>) can/should have a child text 
	component in addition to child tags; this will become inline documentation for the 
	generated-code incarnation of that particular tag.  
	
	The intent for this document format is for it to be read by 
	a SAX based reader, meaning that child-tag ordering will matter, and the generated marshalling code will be 
	dependent on that ordering.  Additionally, the contents (child tags and documentation text) will be hashed into
	a fingerprint that will be used by the generated code to ensure that two components can share messages IFF they 
	are using marshalling code generated from identical ICD versions.  As a developer using the ICD tool and this XML 
	format, you will probably not need to worry about some of these details.
	
	Here is a rundown of the tags.  
	
	The <icd> tag is the top level tag and contains <type> tags as its children.  It is not very interesting.
	
	The <type> tag is the second level tag.  It should have child text for documentation; it will be added to the generated code 
	as comments.  It will have a required "name" attribute, which will become the source-code type name.  It will also have one or more
	<var> or <eat> elements as children.  
	
	The <var> tag is the 3rd level tag beneath <type>.  They will become source-code representations of the various pieces of data 
	that compose a <type>.  <var> tags must have a "name" attribute, which will end up in source code, and a "type" attribute.  
	The type attribute will need to either refer to one of the built-in primitive types (listed below in this sample document) 
	or refer to a previously-defined <type> element; in order for a <var> to reference a <type>, it must be declared above
	the <var>'s parent <type> in the ICD document.  <var>s may also have an additional "count" attribute (it must be an integer, and must be greater than 1).  
	Setting a <var>'s count to something greater than 1 will declare the var as a fixed length array in code.  For the sake of simplicity, only fixed length 
	arrays will be allowed.  No variable length arrays.  Count is optional.  
	
	The <eat> element can be mixed in with <var> elements in a <type> definition.  <eat> must have a "type" attribute set to a previously defined type (and not 
	a built-in type).  When an <eat> tag is encountered, the child variables from its named type will be inserted in-order into the <eat> tag's parent type.  
	Variable name collisions may occur when doing this, and in such cases, the tool will report an error and will not generate any code.  Unlike other elements, <eat> doesn't
	need inline documentation, as it will reuse the documentation strings from the <var>s that are pulled in.  As always, order matters.
	
	This sample is a WIP.  As of right now, I may need to add an <enum> element that can be used like a <type> element, and I may need to add "range" attributes
	to <var> elements.  
	
-->
  <enum-type name="WayPointType">
    <val name="Unknown" num="0"/>
    <val name="Taxi"/>
    <val name="Cruise"/>
    <val name="Descent"/>
    <val name="Ascent"/>
  </enum-type>

  <enum-type name="WayPointType2">
    <val name="FlyBy" num="0"/>
    <val name="FlyOver"/>
    <val name="FlyByLargeTrnAng"/>
  </enum-type>
  
  <!--LatLonAltPoint provides position in a GuidancePoint-->
  <type name ="LatLonAltPoint" hidden="true">
    A LatLonAltPoint is currently only used as part of Guidance Point and LoiterPoint
    <var name="Latitude" type="float32">
      Latitude in degrees [-90, 90].
    </var>
    <var name="Longitude" type="float32">
      Longitude in degrees [-180, 180].
    </var>
    <var name="Altitude" type="float32">
      Altitude in meters
    </var>
  </type>
  
  <!--GuidancePoint is used as a waypoint in the mission plan (and is the same as a waypoint for waypoint guidance-->
  <type name ="GuidancePoint" hidden="true">
    A GuidancePoint will only be sent as part of a GuidancePath
    <var name="ID" type="uint16">
      The ID of the point.
    </var>
    <var name="NextWyPtID" type="uint16">
      The ID of the next point.
    </var>
    <var name="Type" type="WayPointType">
      Type relative to mission
    </var>
    <var name="Type2" type="WayPointType2">
      How the waypoint is to be flown
    </var>
    <eat type="LatLonAltPoint"/>
    <var name="GrndSpd" type="float32">
      Ground speed in mtrs/sec.
    </var>
    <var name="GroundTrack" type="float32">
      Ground track [0, 360) in a clockwise direction. 
    </var>
    <var name="TOA" type="int64">
      Time of arrival in epoch-nanosec
    </var>
    <var name="TurnRadius" type="float32">
      Turn radius in meters
    </var>
    <var name="TurnAngle" type="float32">
      Turn angle in degrees (right is positive, left is negative)
    </var>
    <var name="VerticalSpd" type="float32">
      Vertical speed in mtrs/sec
    </var>
  </type>
  
  <!--MissionPlan is used to represent fat path boundaries and waypoint guidance-->
  <type name ="MissionPlan" hidden="true">
    A GuidancePath will only be sent as part of WayPointGuidance or a FatPath(as a FatPath boundary)
    <var name="Plan" type="GuidancePoint" count="20">
      A sequence of mission plan points with a max of 20 actually set (Note! don't know what Caravan max is- not determined).
    </var>
    <var name="NumPoints" type="uint8">
      The number of points in the plan. Only the 1st NumPoints in the Plan sequence are valid.
    </var>
    <var name="CurrWyPtID" type="uint16">
      The ID of the 1st waypoint of the current segment if on a segment. If in a turn then the ID of the waypoint at the turn.
    </var>
  </type>
 
</icd>